{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The Application Hub is a comprehensive and modular platform delivering SaaS products, designed to cater to the diverse and multifaceted needs of the EO community. It is crafted to support a wide array of stakeholders, from developers and service providers integrating cutting-edge algorithms to researchers harnessing computational power, and analysts requiring clear and concise visualizations. </p> <p>At the heart of the Application Hub is the ability to manage the delivery of work environments and tools for a wide range of user tasks, such as develop, host, execute, and perform exploratory analysis of EO applications, all managed within a single, unified Cloud infrastructure.</p>"},{"location":"#about-the-application-hub-building-block","title":"About the Application Hub Building Block","text":"<p>The Application Hub, leveraging Kubernetes and JupyterHub, creates a robust, scalable, and user-centric platform for Earth Observation (EO) applications and analytics. Kubernetes ensures scalable operation of containerized applications by managing deployment, operation, and traffic distribution, while JupyterHub orchestrates the launching, scaling, and management of application instances, acting as the primary gateway for user requests. The Hub uses dedicated namespaces for each application pod, ensuring organization, security, and isolation. It also dynamically configures application pods based on the task, and personalizes the experience based on user profiles through Kube Spawner. This design ensures the Application Hub remains modular, scalable, and capable of catering to the dynamic requirements of EO tasks.</p> <p>Typically, the Application Hub provides access to platforms and web apps in a Software-as-a-Service mode. Users can engage with containerized Interactive Graphical Applications (IGAs), specialized geospatial data exploration web apps, and customizable dashboards. This allows users not only to explore and analyze results but also to execute new applications or analyses and customize their computing experiences, all accessed from the same integrated Hub interface. Ultimately, this enhances user experience, optimizes software usage costs, and promotes ease of use, making it more accessible to the broader EO community.</p>"},{"location":"#capabilities","title":"Capabilities","text":"<p>The Application Hub is designed to serve a diverse set of users, each with unique needs and workflows. This section outlines various user scenarios to demonstrate the Hub\u2019s versatility and adaptability to manage the delivery of work environments and tools meeting the demands of different stakeholders, from developers and service providers to researchers and the broader Earth Observation (EO) community.</p>"},{"location":"#development-scenario","title":"\u200b Development Scenario","text":"<p>Stakeholder: Service Providers and Developers</p> <p>In this scenario, developers access the Application Hub to access a software development environment. They can utilize the tools and resources provided to them in SaaS mode to create Earth Observation applications using languages such as Python, R, or Java. Specific libraries like SNAP and GDAL aid in processing and analysis. </p> <p>In this scenario, developers can also package their EO applications along with necessary configurations and dependencies. Overall, developers can integrate, build, test, and debug their EO applications seamlessly before transitioning to the deployment phase, aided by features like version control, continuous integration, and GitLab integration.</p>"},{"location":"#execution-scenario","title":"\u200b Execution Scenario","text":"<p>Stakeholder: End-users (Scientists, Researchers, EO Community Members)</p> <p>Once applications are operational, they are made available to a wider audience benefiting from the platform\u2019s data holdings. End-users can specify input parameters and locate compatible datasets from the data catalog. The hosted applications in this scenario typically manage  the execution process, providing real-time updates on processing status, resource consumption estimates, and expected completion times. </p>"},{"location":"#exploratory-analysis","title":"\u200b Exploratory Analysis","text":"<p>Stakeholder: End-users and Developers</p> <p>In this scenario, users engage with the Application Hub\u2019s SaaS products designed for in-depth interaction, analysis, and execution of EO applications. These include containerized Interactive Graphical Applications (IGAs), specialized geospatial data exploration web apps, notebooks, or customizable dashboards. The platform enables users to explore and analyze the results generated from the execution of EO applications and also execute new applications or analyses from within the same environment. This means that users can customize their computing experiences by selecting and executing specific applications, tools, or environments that align with their unique analytical needs. </p>"},{"location":"admin/configuration/","title":"Configuration","text":"<p>See https://eoepca.github.io/application-hub-context/</p>"},{"location":"admin/maintenance/","title":"Maintenance","text":"<p>Administrative and remedial activities coming soon</p>"},{"location":"api/endpoint-specification/","title":"Specification","text":"<p>Coming soon.</p>"},{"location":"api/usage/","title":"Usage","text":"<p>At this stage, refer to https://eoepca.github.io/application-hub-context/jupyterhub-api/</p>"},{"location":"design/overview/","title":"Architecture","text":"<p>The Application Hub combines the power of Kubernetes and JupyterHub to offer a scalable, resilient, and user-centric platform for Earth Observation applications and analyses. Kubernetes, which serves as its orchestration layer ensures scalable, manageable, and efficient operation of containerized applications:</p> <ul> <li>Pod Structure: Every application in the Hub is run within a Kubernetes pod. This structure guarantees isolation, security, and the ability to scale each application independently based on demand.</li> <li>Service Exposure: Upon being deployed and reaching an operational state, these pods expose their services, making them accessible via specific ports. This architecture allows users to interact with the applications through standard web browsers, minimizing the need for specialized tools or software on the client side.</li> <li>Load Balancing and Networking: Using Kubernetes, the Application Hub can automatically distribute incoming application traffic across multiple pods, ensuring high availability and fault tolerance. Moreover, Kubernetes provides intricate networking capabilities, enabling smooth communication between pods and external services.</li> </ul> <p>Central to the Application Hub\u2019s operation is JupyterHub, which orchestrates the launching, scaling, and management of software deployments. While it naturally supports applications like JupyterLab or the IDE Code Server, it also showcases its versatility by functioning as a Software-as-a-Service (SaaS) solution for remote desktop applications, notably QGIS and SNAP, and facilitates the seamless integration and presentation of various dashboards. JupyterHub dynamically provisions the right environment for users and acts as the primary gateway, channeling user requests to the respective application pods, ensuring efficient resource utilization and streamlined user access.</p> <p>The Application Hub leverages the dynamic capabilities of Kubernetes and JupyterHub to provide personalized and context-aware application experiences:</p> <ul> <li>Namespaces: By deploying each application pod in its dedicated namespace, the Hub ensures an organized, secure, and isolated environment. This setup also facilitates easy management, monitoring, and logging of individual application instances.</li> <li>Application Contextualization: This involves dynamically setting up the application pod based on the task at hand. It ensures that the pod has all necessary configurations, from environment variables to specific files (like S3 or Docker configurations), ensuring the application runs optimally.</li> <li>User Profile Management with Kube Spawner: The kube spawner plays a crucial role in contextualizing the application pod experience based on user profiles. From managing authentication and authorization protocols to handling lifecycle events with pre-spawn and post-stop hooks, it ensures a seamless user experience.</li> </ul> <p>This architectural design ensures that the Application Hub remains modular, scalable, and capable of catering to the dynamic and ever-evolving requirements of Earth Observation tasks.</p>"},{"location":"getting-started/more-getting-started/","title":"More getting started\u2026","text":"<p>Further elaboration of Getting Started\u2026</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Quick start instructions - including installation, e.g. of a local instance.</p>"},{"location":"usage/howtos/","title":"How-Tos","text":"<p>How-tos to communicate usage by example.</p>"},{"location":"usage/tutorials/","title":"Tutorials","text":"<p>Tutorials as a learning aid.</p>"}]}